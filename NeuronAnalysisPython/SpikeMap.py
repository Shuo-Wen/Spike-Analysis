import numpy as np
import matplotlib.pyplot as plt
def SpikeMap(InputData,SpykeWidth,waveforms,color,g):
    #SpikeMap Spike map of a signal in 2D space.
#   data = spyke waveforms in a vector (each row is a channel)
#   SpykeWidth = width of the spyke in the plot
#   waveforms = 1 if the waveforms are wanted in the plot together with the
#               average.
#   color = color of the average signal
#   g = gain factor to stretch the plot amplitudes appearence
# InputData = spk_w_clean_aftSpMap;
# SpykeWidth = 10;
# waveforms = 1;
# color = 'b';
# g = 20;

    spk_w_reduced=np.zeros()(InputData.shape[0],1),dtype = float)
    for i in range(InputData.shpae[0]):
        if not len(InputData[i])==0:
            spk_w_reduced[i] = InputData[i]

# Get the position of the electrodes
    elx = np.array([15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330,555,540,525,510,495,480,465,450,435,420,405,390,375,360,345,330])
    ely = np.array([15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,390,390,390,390,390,390,390,390,390,390,390,390,390,390,390,390,405,405,405,405,405,405,405,405,405,405,405,405,405,405,405,405,420,420,420,420,420,420,420,420,420,420,420,420,420,420,420,420,435,435,435,435,435,435,435,435,435,435,435,435,435,435,435,435,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,480,480,480,480,480,480,480,480,480,480,480,480,480,480,480,480,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,360,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,375,390,390,390,390,390,390,390,390,390,390,390,390,390,390,390,390,405,405,405,405,405,405,405,405,405,405,405,405,405,405,405,405,420,420,420,420,420,420,420,420,420,420,420,420,420,420,420,420,435,435,435,435,435,435,435,435,435,435,435,435,435,435,435,435,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,480,480,480,480,480,480,480,480,480,480,480,480,480,480,480,480,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,510,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,525,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540,540'])
    max_xy = numpy.maximum(elx,ely)
    pitch=15
    container=copy(struct)
    container_data = copy(spk_w_reduced)
    container_x = copy(elx)
    container_y = copy(ely)
    container_average = copy(np.zeros(InputData.shape[0],scontainer_data[1][0,].shape[1])
    zeroAVG = np.zeros((1,container_data[1][0,].shape[1]),float)

    for i in arange(InputData.shape[0]):
        if spk_w_reduced[i].shape[0] > 1:
            container_average[i,:]=np.nanmean(spk_w_reduced[i])
        elif len(spk_w_reduced[i])==0:
            container.average[i,:]=zeroAV
        else:
            container.average[i,:]=(spk_w_reduced[i])

    plt.figure
    # Plot electrodes markers
    plt.plot(concat([container.x]),concat([container.y]),'.','Color',concat([0.5,0.5,0.5]))
    # SpykeWidth=2;
    maxamp=max(max(abs(concat([container.average]))))
# SpikeMap.m:48
    normalized_templates=concat([container.average]) / maxamp
# SpikeMap.m:49
    for i in arange(1,size(InputData,1),1).reshape(-1):
        if logical_not(isempty(container.data[i])):
            nsamples=size(normalized_templates(i,arange()),2)
# SpikeMap.m:52
            xtime=arange((container.x(i) - SpykeWidth / 2),(container.x(i) + SpykeWidth / 2 - (SpykeWidth / nsamples)),(SpykeWidth / nsamples))
# SpikeMap.m:53
            if (waveforms):
                for j in arange(1,size(container.data[i],1),1).reshape(-1):
                    yvoltage=dot(g,(container.data[i](j,arange()))) / maxamp + max_xy - pitch - container.y(i)
# SpikeMap.m:56
                    plot(xtime,yvoltage,'Color',concat([1,0.5,0.5]),'Linewidth',1)
            normalized_template=container.average(i,arange()) / maxamp
# SpikeMap.m:60
            yvoltage=dot(g,normalized_template) + max_xy - pitch - container.y(i)
# SpikeMap.m:61
            plot(xtime,yvoltage,'Color',color,'Linewidth',2)

if __name__ == '__main__':
    pass
